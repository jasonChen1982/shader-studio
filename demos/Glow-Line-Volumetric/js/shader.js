var vertexShader = "#define GLSLIFY 1\nvarying vec4 vPosition;\n\nvoid main() {\n  vPosition = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  gl_Position = vPosition;\n}\n"; // eslint-disable-line

var fragmentShader = "#define GLSLIFY 1\nuniform vec2 iResolution;\nuniform float iTime;\nuniform float iTimeDelta;\n\nvoid main() {\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv = gl_FragCoord.xy / iResolution.xy;\n\n  // Time varying pixel color\n  vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n\n  // Output to screen\n  gl_FragColor = vec4(col, 1.0);\n}\n\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec3 hash3( float n ) {\n  return fract(sin(vec3(n, n+1.0, n+2.0)) * vec3(43758.5453123, 22578.1459123, 19642.3490423));\n}\n\nvec3 snoise3( in float x ) {\n  float p = floor(x);\n  float f = fract(x);\n\n  f = f*f*(3.0 - 2.0*f);\n\n  return -1.0 + 2.0 * mix( hash3(p+0.0), hash3(p+1.0), f );\n}\n\nfloat freqs[16];\n\nvec3 distanceLines( vec3 a, vec3 b, vec3 o, vec3 d ) {\n\tvec3 ba = b - a;\n\tvec3 oa = o - a;\n\n\tfloat oad  = dot( oa,  d );\n\tfloat dba  = dot(  d, ba );\n\tfloat baba = dot( ba, ba );\n\tfloat oaba = dot( oa, ba );\n\n\tvec2 th = vec2( -oad*baba + dba*oaba, oaba - oad*dba ) / (baba - dba*dba);\n\n\tth.x = max(   th.x, 0.0 );\n\tth.y = clamp( th.y, 0.0, 1.0 );\n\n\tvec3 p = a + ba*th.y;\n\tvec3 q = o + d*th.x;\n\n\treturn vec3( length( p-q ), th );\n}\n\nvec3 castRay( vec3 ro, vec3 rd, float linesSpeed ) {\n\tvec3 col = vec3(0.0);\n\n\tfloat mindist = 10000.0;\n\tvec3 p = vec3(0.2);\n\tfloat h = 0.0;\n\tfloat rad = 0.04 + 0.15*freqs[0];\n\tfloat mint = 0.0;\n  for( int i=0; i<128; i++ ) {\n\t\tvec3 op = p;\n\n\t\top = p;\n\t\tp  = 1.25*1.0*normalize(snoise3( 64.0*h + linesSpeed*0.015*iTime ));\n\n\t\tvec3 dis = distanceLines( op, p, ro, rd );\n\n\t\tvec3 lcol = 0.6 + 0.4*sin( 10.0*6.2831*h + vec3(0.0,0.6,0.9) );\n\n\t\tfloat m = pow( texture( iChannel0, vec2(h*0.5,0.25) ).x, 2.0 )*(1.0+2.0*h);\n\n\t\tfloat f = 1.0 - 4.0*dis.z*(1.0-dis.z);\n\t\tfloat width = 1240.0 - 1000.0*f;\n\t\twidth *= 0.25;\n\t\tfloat ff = 1.0*exp(-0.06*dis.y*dis.y*dis.y);\n\t\tff *= m;\n\t\tcol += 0.3*lcol*exp( -0.3*width*dis.x*dis.x )*ff;\n\t\tcol += 0.5*lcol*exp( -8.0*width*dis.x*dis.x )*ff;\n\t\th += 1.0/128.0;\n\t}\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 q = fragCoord.xy/iResolution.xy;\n  vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n  vec2 mo = iMouse.xy/iResolution.xy;\n\n\tfloat time = iTime;\n\n\tfor( int i=0; i<16; i++ ) freqs[i] = clamp( 1.9*pow( texture( iChannel0, vec2( 0.05 + 0.5*float(i)/16.0, 0.25 ) ).x, 3.0 ), 0.0, 1.0 );\n\n\t// camera\n\tvec3 ta = vec3( 0.0, 0.0, 0.0 );\n\n  float isFast = smoothstep( 35.8, 35.81, iChannelTime[0] );\n\tisFast -= smoothstep( 61.8, 61.81, iChannelTime[0] );\n\tisFast += smoothstep( 78.0, 78.01, iChannelTime[0] );\n\tisFast -= smoothstep(103.0,103.01, iChannelTime[0] );\n\tisFast += smoothstep(140.0,140.01, iChannelTime[0] );\n\tisFast -= smoothstep(204.0,204.01, iChannelTime[0] );\n\n  float camSpeed = 1.0 + 40.0*isFast;\n\n\tfloat beat = floor( max((iChannelTime[0]-35.7+0.4) / 0.81,0.0) );\n\ttime += beat*10.0*isFast;\n\tcamSpeed *= mix( 1.0, sign(sin( beat*1.0 )), isFast );\n\n  float linesSpeed =  smoothstep( 22.7, 22.71, iChannelTime[0] );\n  linesSpeed -= smoothstep( 61.8, 61.81, iChannelTime[0] );\n  linesSpeed += smoothstep( 78.0, 78.01, iChannelTime[0] );\n  linesSpeed -= smoothstep(140.0,140.01, iChannelTime[0] );\n\n\tta  = 0.2*vec3( cos(0.1*time), 0.0*sin(0.1*time), sin(0.07*time) );\n\n\tvec3 ro = vec3( 1.0*cos(camSpeed*0.05*time+6.28*mo.x), 0.0, 1.0*sin(camSpeed*0.05*time+6.2831*mo.x) );\n\tfloat roll = 0.25*sin(camSpeed*0.01*time);\n\n\t// camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( sin(roll), cos(roll),0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 1.2*cw );\n\n\tfloat curve  = smoothstep( 61.8, 71.0, iChannelTime[0] );\n\t      curve -= smoothstep(103.0,113.0, iChannelTime[0] );\n  rd.xy += curve*0.025*vec2( sin(34.0*q.y), cos(34.0*q.x) );\n\trd = normalize(rd);\n\n\tro *= 1.0 - linesSpeed*0.5*freqs[1];\n  vec3 col = castRay( ro, rd, 1.0 + 20.0*linesSpeed );\n  col = col*col*2.4;\n\n\t// fade to black\n  col *= 1.0 - smoothstep(218.0,228.00, iChannelTime[0] );\n  col *=       smoothstep(  0.0,  4.00, iChannelTime[0] );\n\tif( iChannelTime[0]>61.8 && iChannelTime[0]<65.0 )\n\tcol *= vec3(1.0)*clamp( (iChannelTime[0]-61.8)/(65.0-61.8), 0.0, 1.0 );\n\n  col *= 0.15+0.85*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n\n  fragColor=vec4( col, 1.0 );\n}\n"; // eslint-disable-line

var Vector2 = THREE.Vector2;

var shader = {

  uniforms: {
    iResolution: {
      value: new Vector2(300, 150)
    },
    iTime: {
      value: 0.0
    },
    iTimeDelta: {
      value: 0.0
    },
  },

  vertexShader: vertexShader,

  fragmentShader: fragmentShader

};
